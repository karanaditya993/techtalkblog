<section>
  <p>Written On: April 4, 2015</p>
  <p>
    In Ruby programs, components can be variables that contain many different objects in them. These are known as arrays or hashes. Arrays and Hashes are "indexed collections", in that they are considered a collection of objects that can be referenced and accessed using a key. Thing of it as a box or bag full of groceries. The bag itself is the array or hash, and the contents in the bag are the objects that can be accessed.However, there is a fundamental difference between arrays and hashes.
  </p>
  <p>
    In arrays, each object is indexed with an integer. That means, the first object is considered index zero, or just "0", and can be referenced as such. The second object is "1". So on and so forth. It is important to note that the first object, although the first, is NOT indexed as number 1, but as the number 0. The image below shows how objects are indexed in arrays:</br>
    <img src="https://www.safaribooksonline.com/library/view/computer-science-programming/9781449356835/figs/cspr_0601.png"/></br>
    Hashes, on the other hand, are not indexed through integers or numbers, but are indexed through strings. Certain objects in the hash are named as strings, and when called or "put" to the screen, will display their quantity. So in arrays, calling the first object with 0 will put to the screen the quantity of the first object. In hashes, calling the LABEL of the first object will put to the screen the quantity of the first object. The image below shows how objects in hashes are called:</br>
    <img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2013/06/fetch1b.png"></br>
    Hashes are now more commonly being used becuase of the fact that they are much quicker and easier to locate than the integer value. If you have an array or hash with thousands of different objects, it would be much easier to call or identify the object based on its label rather than its numerical position in the array, don't you think? Nevertheless, arrays and hashes have proven to be extremely useful in Ruby programming.
  </p>
</section>