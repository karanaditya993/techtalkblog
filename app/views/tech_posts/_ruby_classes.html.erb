<section>
  <p>Up until this point, we have been working with ruby methods and variables. This blog aims to teach you the importance and usability of Ruby Classes. So...what are classes?</p>
  <p>Imagine a big pot of stew. The pot itself can be a metaphor for the class, and the stew can be a metaphor for the methods inside that class. The variables inside the methods can be compared to all the ingredients of the stew itself. In my opinion, author David A. Black explains classes perfectly: "Defining a class lets you group behaviours (methods) into convenient bundles, so that you can quickly create many objects that behave essentially the same way". Creating a class allows you to access and call methods inside that class conveniently. Let's create our own class.</p>
  <p><img src= "http://karanaditya993.github.io/imgs/t5-class.png" /></p>
  <p>In this instance, the class is labeled Dog and the methods are the initialize method, the bark method, and the display method. Each of this methods carry out a set of instructions that the class follows when it is called. The intialize method accepts two variables, breed and name. When calling the class, you will insurt the breed and the name so that these subsequent methods can be called. Ergo, if we call d = Dog.new('Labrador','Benzy'), it will create a new object with those variables.</p>
</section>